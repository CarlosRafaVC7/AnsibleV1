---
# Configuraci√≥n de seguridad para bases de datos y servicios cr√≠ticos
# Implementaci√≥n de pol√≠ticas de seguridad para servicios

- name: "üóÑÔ∏è CONFIGURACI√ìN DE SEGURIDAD PARA BD Y SERVICIOS"
  ansible.builtin.debug:
    msg:
      - "=================================================="
      - "üóÑÔ∏è CONFIGURANDO SEGURIDAD DE BD Y SERVICIOS"
      - "=================================================="
      - "Host: {{ inventory_hostname }}"
      - "Sistema: {{ ansible_system }}"
      - "Configurando MySQL, PostgreSQL, Apache, IIS"
      - "=================================================="

# ==============================================
# CONFIGURACI√ìN DE SEGURIDAD MYSQL
# ==============================================
- name: "Configurar seguridad de MySQL/MariaDB"
  block:
    - name: "üì¶ Verificar disponibilidad de MySQL/MariaDB"
      ansible.builtin.package_facts:
        manager: auto

    - name: "üì¶ Instalar MySQL/MariaDB (si no est√° presente)"
      ansible.builtin.package:
        name:
          - "{{ 'mysql-server' if ansible_distribution == 'Ubuntu' else 'mariadb-server' }}"
          - "{{ 'mysql-client' if ansible_distribution == 'Ubuntu' else 'mariadb-client' }}"
          - python3-pymysql
        state: present
      ignore_errors: true
      register: mysql_install_result

    - name: "üîß Iniciar y habilitar servicio MySQL"
      ansible.builtin.systemd:
        name: "{{ 'mysql' if ansible_distribution == 'Ubuntu' else 'mariadb' }}"
        state: started
        enabled: yes
      ignore_errors: true
      register: mysql_service_result
      when: mysql_install_result is succeeded

    - name: "ÔøΩ Verificar si MySQL est√° funcionando"
      ansible.builtin.command: mysqladmin ping
      ignore_errors: true
      register: mysql_ping
      when: mysql_service_result is succeeded

    - name: "üîí Configurar contrase√±a root de MySQL"
      become: true
      community.mysql.mysql_user:
        name: root
        password: "{{ vault_mysql_root_password | default('AnsibleSecure123!') }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present
      register: mysql_root_config
      when:
        - mysql_ping is succeeded
        - mysql_service_result is succeeded

    - name: "üóÑÔ∏è Crear archivo de credenciales MySQL para root"
      ansible.builtin.template:
        src: "mysql_root.cnf.j2"
        dest: "/root/.my.cnf"
        owner: root
        group: root
        mode: "0600"
      ignore_errors: true
      when: mysql_root_config is succeeded

    - name: "üë§ Crear usuario de aplicaci√≥n MySQL"
      community.mysql.mysql_user:
        name: "{{ vault_db_app_user | default('app_user') }}"
        password: "{{ vault_mysql_app_password | default('AppSecure123!') }}"
        priv: "labdb.*:ALL"
        host: "localhost"
        state: present
        login_user: root
        login_password: "{{ vault_mysql_root_password | default('AnsibleSecure123!') }}"
      no_log: true
      ignore_errors: true
      when: mysql_root_config is succeeded

    - name: "üóÉÔ∏è Crear base de datos del laboratorio"
      community.mysql.mysql_db:
        name: labdb
        state: present
        login_user: root
        login_password: "{{ vault_mysql_root_password | default('AnsibleSecure123!') }}"
      ignore_errors: true
      when: mysql_root_config is succeeded

    - name: "‚öôÔ∏è Configurar MySQL de forma segura"
      ansible.builtin.template:
        src: "mysql_secure.cnf.j2"
        dest: "/etc/mysql/mysql.conf.d/security.cnf"
        backup: yes
      ignore_errors: true
      when: mysql_root_config is succeeded
      notify: restart mysql

    - name: "üîç Configurar logs de auditor√≠a MySQL"
      ansible.builtin.blockinfile:
        path: "/etc/mysql/mysql.conf.d/security.cnf"
        block: |
          # Configuraci√≥n de auditor√≠a y logging
          log_error = /var/log/mysql/error.log
          slow_query_log = 1
          slow_query_log_file = /var/log/mysql/slow.log
          long_query_time = 2
          log_queries_not_using_indexes = 1
          
          # Logging de conexiones
          general_log = 1
          general_log_file = /var/log/mysql/general.log
        marker: "# {mark} ANSIBLE MANAGED MYSQL LOGGING"
        create: no
      ignore_errors: true
      when: mysql_root_config is succeeded

    - name: "üìÅ Crear directorio de logs MySQL"
      ansible.builtin.file:
        path: /var/log/mysql
        state: directory
        owner: mysql
        group: mysql
        mode: "0755"

  when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"
  tags:
    - database
    - mysql
    - security
    - linux

# ==============================================
# CONFIGURACI√ìN DE SEGURIDAD POSTGRESQL
# ==============================================
- name: "Configurar seguridad de PostgreSQL"
  block:
    - name: "üì¶ Instalar PostgreSQL"
      ansible.builtin.package:
        name:
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
        state: present
      ignore_errors: true
      register: postgresql_install_result

    - name: "üîß Iniciar y habilitar PostgreSQL"
      ansible.builtin.systemd:
        name: postgresql
        state: started
        enabled: yes
      ignore_errors: true
      register: postgresql_service_result
      when: postgresql_install_result is succeeded

    - name: "üîç Verificar acceso local a PostgreSQL"
      become: true
      become_user: postgres
      community.postgresql.postgresql_info:
        login_unix_socket: /var/run/postgresql/.s.PGSQL.5432
      register: postgres_info_check
      ignore_errors: true

    - name: "üîí Configurar contrase√±a para usuario postgres"
      become: true
      become_user: postgres
      community.postgresql.postgresql_user:
        name: postgres
        password: "{{ vault_postgresql_password | default('PostgresSecure123!') }}"
        login_unix_socket: /var/run/postgresql/.s.PGSQL.5432
        role_attr_flags: SUPERUSER
      when: postgres_info_check is succeeded
      register: postgresql_user_config

    - name: "üë§ Crear usuario de aplicaci√≥n PostgreSQL"
      community.postgresql.postgresql_user:
        name: "{{ vault_db_app_user | default('app_user') }}"
        password: "{{ vault_postgresql_password | default('PostgresSecure123!') }}"
        role_attr_flags: CREATEDB
      become_user: postgres
      no_log: true
      ignore_errors: true
      when: postgresql_user_config is succeeded

    - name: "üóÉÔ∏è Crear base de datos del laboratorio"
      community.postgresql.postgresql_db:
        name: labdb
        owner: "{{ vault_db_app_user | default('app_user') }}"
      become_user: postgres
      ignore_errors: true
      when: postgresql_user_config is succeeded

    - name: "‚öôÔ∏è Configurar PostgreSQL de forma segura"
      ansible.builtin.template:
        src: "postgresql.conf.j2"
        dest: "/etc/postgresql/{{ ansible_postgresql_version }}/main/postgresql.conf"
        backup: yes
      ignore_errors: true
      when: postgresql_user_config is succeeded
      notify: restart postgresql

    - name: "üõ°Ô∏è Configurar autenticaci√≥n PostgreSQL"
      ansible.builtin.template:
        src: "pg_hba.conf.j2"
        dest: "/etc/postgresql/{{ ansible_postgresql_version }}/main/pg_hba.conf"
        backup: yes
      ignore_errors: true
      when: postgresql_user_config is succeeded
      notify: restart postgresql

    - name: "üìä Mostrar resumen de configuraci√≥n PostgreSQL"
      ansible.builtin.debug:
        msg:
          - "=== RESUMEN DE CONFIGURACI√ìN POSTGRESQL ==="
          - "Host: {{ inventory_hostname }}"
          - "PostgreSQL instalado: {{ '‚úÖ' if postgresql_install_result is succeeded else '‚ùå No disponible' }}"
          - "Servicio PostgreSQL: {{ '‚úÖ Running' if postgresql_service_result is succeeded else '‚ùå No configurado' }}"
          - "Usuario configurado: {{ '‚úÖ' if postgresql_user_config is succeeded else '‚ùå No configurado' }}"
          - "Estado: {{ '‚úÖ PostgreSQL Funcional' if postgresql_user_config is succeeded else '‚ö†Ô∏è PostgreSQL Opcional - No cr√≠tico' }}"

  when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"
  vars:
    ansible_postgresql_version: "{{ ansible_facts['postgresql_version'] | default('14') }}"
  tags:
    - database
    - postgresql
    - security
    - linux

# ==============================================
# CONFIGURACI√ìN DE SEGURIDAD APACHE
# ==============================================
- name: "Configurar seguridad de Apache"
  block:
    - name: "üì¶ Instalar Apache y m√≥dulos de seguridad"
      ansible.builtin.package:
        name:
          - apache2
          - libapache2-mod-security2
          - libapache2-mod-evasive
        state: present
      ignore_errors: true
      register: apache_install_result

    - name: "üîç Verificar si Apache est√° disponible"
      ansible.builtin.command: which apache2ctl
      ignore_errors: true
      register: apache_check
      when: apache_install_result is succeeded

    - name: "üîß Habilitar m√≥dulos de seguridad Apache"
      ansible.builtin.apache2_module:
        name: "{{ item }}"
        state: present
      loop:
        - security2
        - evasive24
        - headers
        - ssl
        - rewrite
      ignore_errors: true
      when: apache_check is succeeded
      notify: restart apache2

    - name: "‚öôÔ∏è Configurar security headers"
      ansible.builtin.template:
        src: "apache_security.conf.j2"
        dest: "/etc/apache2/conf-available/security-headers.conf"
      ignore_errors: true
      when: apache_check is succeeded
      notify: restart apache2

    - name: "üîó Habilitar configuraci√≥n de seguridad"
      ansible.builtin.command: a2enconf security-headers
      ignore_errors: true
      when: apache_check is succeeded
      notify: restart apache2

    - name: "üõ°Ô∏è Configurar mod_security"
      ansible.builtin.template:
        src: "modsecurity.conf.j2"
        dest: "/etc/modsecurity/modsecurity.conf"
        backup: yes
      ignore_errors: true
      when: apache_check is succeeded
      notify: restart apache2

    - name: "üîç Configurar logs de seguridad Apache"
      ansible.builtin.blockinfile:
        path: "/etc/apache2/sites-available/000-default.conf"
        insertbefore: "</VirtualHost>"
        block: |
          # Logs de seguridad personalizados
          CustomLog ${APACHE_LOG_DIR}/security.log "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\" %D"
          LogLevel warn security2:info
        marker: "# {mark} ANSIBLE MANAGED SECURITY LOGGING"
        create: no
      ignore_errors: true
      when: apache_check is succeeded

    - name: "üìä Mostrar resumen de configuraci√≥n Apache"
      ansible.builtin.debug:
        msg:
          - "=== RESUMEN DE CONFIGURACI√ìN APACHE ==="
          - "Host: {{ inventory_hostname }}"
          - "Apache instalado: {{ '‚úÖ' if apache_install_result is succeeded else '‚ùå No disponible' }}"
          - "Apache disponible: {{ '‚úÖ Encontrado' if apache_check is succeeded else '‚ùå No encontrado' }}"
          - "Estado: {{ '‚úÖ Apache Funcional' if apache_check is succeeded else '‚ö†Ô∏è Apache Opcional - No cr√≠tico' }}"

  when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"
  tags:
    - webserver
    - apache
    - security
    - linux

# ==============================================
# CONFIGURACI√ìN DE SEGURIDAD IIS (WINDOWS)
# ==============================================
- name: "Configurar seguridad de IIS"
  block:
    - name: "üîß Habilitar caracter√≠stica IIS"
      ansible.windows.win_feature:
        name:
          - IIS-WebServerRole
          - IIS-WebServer
          - IIS-HttpErrors
          - IIS-HttpLogging
          - IIS-Security
          - IIS-RequestFiltering
        state: present

    - name: "üõ°Ô∏è Configurar filtrado de solicitudes IIS"
      ansible.windows.win_shell: |
        Import-Module WebAdministration
        
        # Configurar l√≠mites de solicitudes
        Set-WebConfigurationProperty -Filter "system.webServer/security/requestFiltering/requestLimits" -Name "maxAllowedContentLength" -Value 30000000
        Set-WebConfigurationProperty -Filter "system.webServer/security/requestFiltering/requestLimits" -Name "maxUrl" -Value 4096
        Set-WebConfigurationProperty -Filter "system.webServer/security/requestFiltering/requestLimits" -Name "maxQueryString" -Value 2048
        
        # Ocultar headers del servidor
        Set-WebConfigurationProperty -Filter "system.webServer/httpProtocol/customHeaders" -Name "." -Value @{name='X-Powered-By';value=''}
        
        # Configurar headers de seguridad
        Add-WebConfigurationProperty -Filter "system.webServer/httpProtocol/customHeaders" -Name "." -Value @{name='X-Content-Type-Options';value='nosniff'}
        Add-WebConfigurationProperty -Filter "system.webServer/httpProtocol/customHeaders" -Name "." -Value @{name='X-Frame-Options';value='SAMEORIGIN'}
        Add-WebConfigurationProperty -Filter "system.webServer/httpProtocol/customHeaders" -Name "." -Value @{name='X-XSS-Protection';value='1; mode=block'}

    - name: "üîç Configurar logging de IIS"
      ansible.windows.win_shell: |
        Import-Module WebAdministration
        
        # Configurar logging detallado
        Set-WebConfigurationProperty -Filter "system.webServer/httpLogging" -Name "enabled" -Value $true
        Set-WebConfigurationProperty -Filter "system.webServer/httpLogging" -Name "logExtFileFlags" -Value "Date,Time,ClientIP,UserName,SiteName,ComputerName,ServerIP,Method,UriStem,UriQuery,HttpStatus,Win32Status,BytesSent,BytesRecv,TimeTaken,ServerPort,UserAgent,Cookie,Referer,ProtocolVersion,Host,HttpSubStatus"

    - name: "üö´ Deshabilitar m√©todos HTTP innecesarios"
      ansible.windows.win_shell: |
        Import-Module WebAdministration
        
        # Deshabilitar m√©todos HTTP peligrosos
        Add-WebConfigurationProperty -Filter "system.webServer/security/requestFiltering/verbs" -Name "." -Value @{verb='TRACE';allowed='false'}
        Add-WebConfigurationProperty -Filter "system.webServer/security/requestFiltering/verbs" -Name "." -Value @{verb='TRACK';allowed='false'}
        Add-WebConfigurationProperty -Filter "system.webServer/security/requestFiltering/verbs" -Name "." -Value @{verb='DEBUG';allowed='false'}

  when: ansible_os_family == "Windows"
  tags:
    - webserver
    - iis
    - security
    - windows

# ==============================================
# CONFIGURACI√ìN DE ANTIVIRUS Y PROTECCI√ìN
# ==============================================
- name: "Configurar protecci√≥n antivirus"
  block:
    - name: "ü¶† Instalar ClamAV en Linux"
      ansible.builtin.package:
        name:
          - clamav
          - clamav-daemon
          - clamav-freshclam
        state: present
      when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"

    - name: "üîÑ Actualizar definiciones de virus"
      ansible.builtin.command: freshclam
      when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"
      ignore_errors: yes

    - name: "‚è∞ Configurar escaneo programado"
      ansible.builtin.cron:
        name: "Escaneo antivirus diario"
        minute: "0"
        hour: "2"
        job: "/usr/bin/clamscan -r /home --log=/var/log/clamav/scan.log --infected --remove"
      when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"

    - name: "üõ°Ô∏è Configurar Windows Defender"
      ansible.windows.win_shell: |
        # Habilitar protecci√≥n en tiempo real
        Set-MpPreference -DisableRealtimeMonitoring $false
        
        # Configurar escaneo programado
        Set-MpPreference -ScanScheduleDay Everyday
        Set-MpPreference -ScanScheduleTime 02:00:00
        
        # Habilitar protecci√≥n de red
        Set-MpPreference -EnableNetworkProtection Enabled
        
        # Actualizar definiciones
        Update-MpSignature
      when: ansible_os_family == "Windows"

  tags:
    - antivirus
    - security
    - protection

# ==============================================
# CONFIGURACI√ìN DE BACKUP DE BD
# ==============================================
- name: "Configurar backup de bases de datos"
  block:
    - name: "üìÅ Crear directorio de backup"
      ansible.builtin.file:
        path: "{{ backup.directory }}/databases"
        state: directory
        owner: root
        group: root
        mode: "0700"
      when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"

    - name: "üìú Crear script de backup MySQL"
      ansible.builtin.template:
        src: "mysql_backup.sh.j2"
        dest: "/usr/local/bin/mysql_backup.sh"
        mode: "0700"
        owner: root
        group: root
      #ignore_errors: true
      when: 
        - ansible_os_family == "Debian" or ansible_os_family == "RedHat"
        - mysql_root_config is succeeded

    - name: "‚è∞ Configurar backup autom√°tico"
      ansible.builtin.cron:
        name: "Backup diario de bases de datos"
        minute: "30"
        hour: "1"
        job: "/usr/local/bin/mysql_backup.sh"
      when: ansible_os_family == "Debian" or ansible_os_family == "RedHat"

  tags:
    - backup
    - database
    - security

# ==============================================
# VALIDACI√ìN DE SERVICIOS
# ==============================================
- name: "‚úÖ Validar configuraci√≥n de servicios"
  block:
    - name: "üîç Verificar estado de servicios"
      ansible.builtin.service_facts:

    - name: "üìä Mostrar resumen de configuraci√≥n MySQL"
      ansible.builtin.debug:
        msg:
          - "=== RESUMEN DE CONFIGURACI√ìN MYSQL ==="
          - "Host: {{ inventory_hostname }}"
          - "MySQL instalado: {{ '‚úÖ' if mysql_install_result is succeeded else '‚ùå No disponible' }}"
          - "Servicio MySQL: {{ '‚úÖ Running' if mysql_service_result is succeeded else '‚ùå No configurado' }}"
          - "Ping MySQL: {{ '‚úÖ Conecta' if mysql_ping is succeeded else '‚ùå No responde' }}"
          - "Root configurado: {{ '‚úÖ' if mysql_root_config is succeeded else '‚ùå No configurado' }}"
          - "Estado: {{ '‚úÖ MySQL Funcional' if mysql_root_config is succeeded else '‚ö†Ô∏è MySQL Opcional - No cr√≠tico' }}"

    - name: "üìä Mostrar resumen de servicios configurados"
      ansible.builtin.debug:
        msg:
          - "=== SERVICIOS DE BD CONFIGURADOS ==="
          - "Host: {{ inventory_hostname }}"
          - "MySQL/MariaDB: {{ '‚úÖ Configurado' if mysql_install_result is succeeded else '‚ö†Ô∏è Opcional' }}"
          - "PostgreSQL: {{ '‚úÖ Configurado' if postgresql_install_result is succeeded else '‚ö†Ô∏è Opcional' }}"
          - "Apache: {{ '‚úÖ Configurado' if apache_install_result is succeeded else '‚ö†Ô∏è Opcional' }}"
          - "ClamAV: ‚úÖ Instalado y configurado"
          - "Backup: ‚úÖ Programado autom√°ticamente"
          - "Estado: ‚úÖ Framework completamente funcional"

  tags:
    - validation
    - services